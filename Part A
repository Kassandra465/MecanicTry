import numpy as np
from scipy.linalg import eigh

# Propriétés matérielles de l'acier
rho = 7800  # kg/m^3
E = 210e9  # Pa
nu = 0.3  # Coefficient de Poisson
G = E / (2 * (1 + nu))  # Module de cisaillement

# Dimensions des poutres
diametre_exterieur = 0.15  # m
epaisseur_paroi = 0.005  # m

# Calcul des propriétés de la section
A = np.pi * (diametre_exterieur**2 - (diametre_exterieur - 2 * epaisseur_paroi)**2) / 4
I = np.pi * (diametre_exterieur**4 - (diametre_exterieur - 2 * epaisseur_paroi)**4) / 64
Jx = I  # Moment d'inertie polaire autour de l'axe x (supposé circulaire)

# Initialisation des listes et matrices
elemList = []
dofList = []
nodeList = []

# Définir les nœuds principaux et leurs coordonnées
main_nodes = np.array([
    [0, 0, 5],      # Nœud 1
    [0, 2, 5],      # Nœud 2
    [1, 0, 4.5],    # Nœud 3
    [1, 2, 4.5],    # Nœud 4
    [2, 0, 4],      # Nœud 5
    [2, 2, 4],      # Nœud 6
    [3, 0, 3.5],    # Nœud 7
    [3, 2, 3.5],    # Nœud 8
    [4, 0, 3],      # Nœud 9
    [4, 2, 3],      # Nœud 10
    [5, 0, 2.5],    # Nœud 11
    [5, 2, 2.5],    # Nœud 12
    [6, 0, 2],      # Nœud 13
    [6, 2, 2],      # Nœud 14
    [7, 0, 1.5],    # Nœud 15
    [7, 2, 1.5],    # Nœud 16
    [8, 0, 1],      # Nœud 17
    [8, 2, 1],      # Nœud 18
    [0, 0, 0],      # Nœud 19
    [0, 2, 0],      # Nœud 20
    [0, 0, 2.5],     # Nœud 21
    [0, 2, 2.5],     # Nœud 22
    [4, 0, 0],      # Nœud 23
    [4, 2, 0],      # Nœud 24
    [4, 0, 1.5],     # Nœud 25
    [4, 2, 1.5],     # Nœud 26
    [8, 0, 0],       # Nœud 27
    [8, 2, 0],       # Nœud 28
    [0, 1, 1.25],    # Nœud 29
    [0, 1, 3.75],    # Nœud 30
    [4, 1, 0.75],    # Nœud 31
    [4, 1, 2.25],    # Nœud 32
    [8, 1, 0.5],     # Nœud 33
])

# Ajouter les nœuds principaux à la liste des nœuds
nodeList.extend(main_nodes)

# Définir les poutres principales
main_beams = np.array([
    [1, 2],  # Poutre 1
    [1, 3],  # Poutre 2
    [2, 4],  # Poutre 3
    [3, 4],  # Poutre 4
    [3, 5],  # Poutre 5
    [4, 6],  # Poutre 6
    [5, 6],  # Poutre 7
    [5, 7],  # Poutre 8
    [6, 8],  # Poutre 9
    [6, 7],  # Poutre 10
    [7, 8],  # Poutre 11
    [7, 9],  # Poutre 12
    [8, 10], # Poutre 13
    [9, 10],  # Poutre 14
    [9, 11],  # Poutre 15
    [10, 12],  # Poutre 16
    [11, 12],  # Poutre 17
    [11, 13],  # Poutre 18
    [12, 14],  # Poutre 19
    [13, 14],  # Poutre 20
    [13, 15],  # Poutre 21
    [14, 16],  # Poutre 22
    [15, 16],  # Poutre 23
    [15, 17],  # Poutre 24
    [16, 18],  # Poutre 25
    [17, 18],  # Poutre 26
    [1, 21],  # Poutre 27
    [1, 30],  # Poutre 28
    [2, 22],  # Poutre 29
    [2, 30],  # Poutre 30
    [21, 30],   # Poutre 31
    [22, 30],   # Poutre 32
    [21, 22],   # Poutre 33
    [20, 22],   # Poutre 34
    [21, 29],   # Poutre 35
    [22, 29],   # Poutre 36
    [19, 29],   # Poutre 37
    [20, 29],   # Poutre 38
    [21, 19],   # Poutre 39
    [9, 32],   # Poutre 40
    [9, 25],   # Poutre 41
    [32, 26],   # Poutre 42
    [32, 25],   # Poutre 43
    [10, 26],   # Poutre 44
    [10, 32],   # Poutre 45
    [25, 26],   # Poutre 46
    [25, 31],   # Poutre 47
    [26, 31],   # Poutre 48
    [23, 31],   # Poutre 49
    [24, 31],   # Poutre 50
    [23, 25],   # Poutre 51
    [24, 26],   # Poutre 52
    [17, 27],   # Poutre 53
    [18, 28],   # Poutre 54
    [17, 33],   # Poutre 55
    [18, 33],   # Poutre 56
    [27, 33],   # Poutre 57
    [28, 33]   # Poutre 58
])

# Ajouter les poutres principales à la liste des éléments
elemList.extend(main_beams)

# Définir les degrés de liberté pour les nœuds principaux
main_dofs = np.array([
    [1, 2, 3, 4, 5, 6],    # Nœud 1
    [7, 8, 9, 10, 11, 12], # Nœud 2
    [13, 14, 15, 16, 17, 18], # Nœud 3
    [19, 20, 21, 22, 23, 24], # Nœud 4
    [25, 26, 27, 28, 29, 30], # Nœud 5
    [31, 32, 33, 34, 35, 36], # Nœud 6
    [37, 38, 39, 40, 41, 42], # Nœud 7
    [43, 44, 45, 46, 47, 48], # Nœud 8
    [49, 50, 51, 52, 53, 54], # Nœud 9
    [55, 56, 57, 58, 59, 60], # Nœud 10
    [61, 62, 63, 64, 65, 66], # Nœud 11
    [67, 68, 69, 70, 71, 72], # Nœud 12
    [73, 74, 75, 76, 77, 78], # Nœud 13
    [79, 80, 81, 82, 83, 84], # Nœud 14
    [85, 86, 87, 88, 89, 90], # Nœud 15
    [91, 92, 93, 94, 95, 96], # Nœud 16
    [97, 98, 99, 100, 101, 102], # Nœud 17
    [103, 104, 105, 106, 107, 108], # Nœud 18
    [109, 110, 111, 112, 113, 114], # Nœud 19
    [115, 116, 117, 118, 119, 120], # Nœud 20
    [121, 122, 123, 124, 125, 126], # Nœud 21
    [127, 128, 129, 130, 131, 132], # Nœud 22
    [133, 134, 135, 136, 137, 138], # Nœud 23
    [139, 140, 141, 142, 143, 144], # Nœud 24
    [145, 146, 147, 148, 149, 150], # Nœud 25
    [151, 152, 153, 154, 155, 156], # Nœud 26
    [157, 158, 159, 160, 161, 162], # Nœud 27
    [163, 164, 165, 166, 167, 168], # Nœud 28
    [169, 170, 171, 172, 173, 174], # Nœud 29
    [175, 176, 177, 178, 179, 180], # Nœud 30
    [181, 182, 183, 184, 185, 186], # Nœud 31
    [187, 188, 189, 190, 191, 192], # Nœud 32
    [193, 194, 195, 196, 197, 198]  # Nœud 33
])

# Ajouter les degrés de liberté pour les nœuds principaux à la liste des degrés de liberté
dofList.extend(main_dofs.flatten())

# Ajouter les degrés de liberté pour les nœuds principaux à la liste des degrés de liberté
dofList.extend(main_dofs.flatten())

# Fonction pour ajouter les nœuds intermédiaires et les degrés de liberté correspondants
def add_intermediate_nodes(num_elements_per_beam):
    for i in range(len(main_beams)):
        start_node = main_beams[i, 0]
        end_node = main_beams[i, 1]
        for j in range(1, num_elements_per_beam):
            node_id = len(nodeList) + 1
            node_start = np.array(nodeList[start_node - 1])
            node_end = np.array(nodeList[end_node - 1])
            x = (node_end[0] - node_start[0]) * j / (num_elements_per_beam + 1) + node_start[0]
            y = (node_end[1] - node_start[1]) * j / (num_elements_per_beam + 1) + node_start[1]
            z = (node_end[2] - node_start[2]) * j / (num_elements_per_beam + 1) + node_start[2]
            nodeList.append([x, y, z])
            dofs = np.arange(len(dofList) + 1, len(dofList) + 7)
            dofList.extend(dofs)
            if j < num_elements_per_beam:
                elemList.append([len(nodeList) - 1, node_id])
            else:
                elemList.append([len(nodeList) - 1, end_node])

# Fonction pour calculer la matrice de masse élémentaire
def M_el(rho, A, l):
    return rho * A * l * np.array([
        [13/35, 0, 0, 0, 11*l/210, 0],
        [0, 13/35, 0, -11*l/210, 0, l**2/105],
        [0, 0, l**2/105, 0, -13*l/420, 0],
        [0, -11*l/210, 0, l**2/105, 0, 13*l/420],
        [11*l/210, 0, -13*l/420, 0, l**2/105, 0],
        [0, l**2/105, 0, 13*l/420, 0, l**2/105]
    ])

# Fonction pour calculer la matrice de rigidité élémentaire
def K_el(E, G, Jx, A, l):
    return E * A / l * np.array([
        [1, 0, 0, 0, 0, 0],
        [0, 12/l**2, 0, 0, 0, 6/l],
        [0, 0, 12/l**2, 0, -6/l, 0],
        [0, 0, 0, G*Jx/l, 0, 0],
        [0, 0, -6/l, 0, 4/l, 0],
        [0, 6/l, 0, 0, 0, 2/l],
        [-1, 0, 0, 0, 0, 0],
        [0, -12/l**2, 0, 0, 0, 6/l],
        [0, 0, -12/l**2, 0, 6/l, 0],
        [0, 0, 0, -G*Jx/l, 0, 0],
        [0, 0, -6/l, 0, 2/l, 0],
        [0, 6/l, 0, 0, 0, 4/l]
    ])

# Fonction pour obtenir le vecteur de localisation pour un élément
def get_locel(elem_id):
    start_node = elemList[elem_id][0]
    end_node = elemList[elem_id][1]
    start_dof = dofList[6 * (start_node - 1): 6 * start_node]
    end_dof = dofList[6 * (end_node - 1): 6 * end_node]
    return np.concatenate((start_dof, end_dof))

# Fonction pour assembler les matrices globales
def assemble_global_matrices():
    total_dof = len(dofList)
    M_global = np.zeros((total_dof, total_dof))
    K_global = np.zeros((total_dof, total_dof))

    for elem_id in range(len(elemList)):
        l = np.linalg.norm(np.array(nodeList[elemList[elem_id][1] - 1]) - np.array(nodeList[elemList[elem_id][0] - 1]))
        M_el_ = M_el(rho, A, l)
        K_el_ = K_el(E, G, Jx, A, l)
        locel = get_locel(elem_id)

        for i in range(12):
            for j in range(12):
                if locel[i] > 0 and locel[j] > 0:
                    M_global[locel[i]-1, locel[j]-1] += M_el_[i, j]
                    K_global[locel[i]-1, locel[j]-1] += K_el_[i, j]

    return M_global, K_global

# Fonction pour extraire les fréquences naturelles et les modes associés
def extract_frequencies(K_global, M_global):
    eigenvalues, eigenvectors = eigh(K_global, M_global)
    frequencies = np.sqrt(np.maximum(eigenvalues, 0)) / (2 * np.pi)
    return frequencies, eigenvectors

# Fonction pour effectuer l'étude de convergence
def convergence_study():
    num_elements_per_beam = [1, 2, 4, 8]
    convergence_results = []

    for num_elem in num_elements_per_beam:
        global elemList, dofList, nodeList
        elemList = []
        dofList = []
        nodeList = []

        # Définir les nœuds principaux et leurs coordonnées
        nodeList.extend(main_nodes)

        # Définir les poutres principales
        elemList.extend(main_beams)

        # Définir les degrés de liberté pour les nœuds principaux
        dofList.extend(main_dofs.flatten())

        # Ajouter les nœuds intermédiaires et les degrés de liberté correspondants
        add_intermediate_nodes(num_elem)

        # Assemblage des matrices globales
        M_global, K_global = assemble_global_matrices()

        # Extraction des fréquences naturelles et des modes associés
        frequencies, eigenvectors = extract_frequencies(K_global, M_global)

        # Stockage des résultats
        convergence_results.append((num_elem, frequencies[:6]))

    return convergence_results

# Main code execution
add_intermediate_nodes(4)  # Ajouter les nœuds intermédiaires pour 4 éléments par poutre
M_global, K_global = assemble_global_matrices()  # Assemblage des matrices globales
frequencies, eigenvectors = extract_frequencies(K_global, M_global)  # Extraction des fréquences naturelles et des modes associés

# Affichage des six premières fréquences naturelles
print("Six premières fréquences naturelles :")
for i in range(6):
    print(f"Fréquence {i+1}: {frequencies[i]:.2f} Hz")

# Étude de convergence
convergence_results = convergence_study()
for num_elem, frequencies in convergence_results:
    print(f"Nombre d'éléments par poutre: {num_elem}")
    for i in range(6):
        print(f"Fréquence {i+1}: {frequencies[i]:.2f} Hz")

# Calcul de la masse totale du système
masse_supporters = 51 * 80  # kg
masse_totale = masse_supporters + np.sum(np.diag(M_global))
print(f"Masse totale du système : {masse_totale:.2f} kg")
